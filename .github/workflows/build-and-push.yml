name: Build and Push

on:
  workflow_dispatch:
  push:
    branches: [ "main", "develop" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - id: extract_branch
        name: Extract branch name
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: npm ci

      - id: build-step
        name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  containerize:
    name: Containerize and Push image

    runs-on: ubuntu-latest
    needs: build

    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    permissions:
      contents: write
      packages: write

    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      # Tagging rule
      # [yy].[m].[d].[H][M].v[actions build number]
      - name: Set Tag for Build and Artifacts
        run: |
          echo "IMAGE_TAG=${{ github.event.repository.name }}.$(TZ=UTC-9 date +'%y%m%d.%H%M').$(printf 'v%03d' ${{github.run_number}})" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: ACR login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Build and push Container image
        uses: docker/build-push-action@v6.5.0
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ github.event.repository.name }}-cache
          cache-to: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ github.event.repository.name }}-cache,mode=max
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ github.event.repository.name }}-${{ needs.build.outputs.branch }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ github.event.repository.name }}-${{ needs.build.outputs.branch }}:latest

      - id: set_tag
        name: Add Git tag to source repository and setup output"
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git tag -a "${{ env.IMAGE_TAG }}" -m "Push tag ${{ env.IMAGE_TAG }}"
          git push origin "${{ env.IMAGE_TAG }}"
          
          echo "image_tag=$(echo ${{ env.IMAGE_TAG }})" >> $GITHUB_OUTPUT

          
  trigger-argocd-sync:
    needs: [ build, containerize ]
    runs-on: ubuntu-latest

    env:
      BUILD_BRANCH: ${{ needs.build.outputs.branch }}
      GITOPS_REPOSITORY: neocode24/gitops-repo
      GITOPS_APP_PATH: apps/npm-hello-world/overlays
      GITOPS_PATH: "dev"
      GITOPS_PAT: ${{ secrets.GITOPS_PAT }}

      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

      ARGOCD_APP_NAME: npm-hello-world
      ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      ARGOCD_DEST_K8S_SERVER: "https://kubernetes.default.svc"
    
    steps:
      - name: Set gitops directory path based on branch
        run: |
          if [[ "${{ env.BUILD_BRANCH }}" == "main" ]]; then
            echo "Setting path to prd"
            echo "GITOPS_PATH=prd" >> $GITHUB_ENV
          elif [[ "${{ env.BUILD_BRANCH }}" == "develop" ]]; then
            echo "Setting path to dev"
            echo "GITOPS_PATH=dev" >> $GITHUB_ENV
          else
            echo "Setting default path"
          fi
        shell: bash

      - name: GitOps 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPOSITORY }}
          token: ${{ env.GITOPS_PAT }}
            
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: 이미지 태그 업데이트
        run: |
          cd ${{ env.GITOPS_APP_PATH }}/${{ env.GITOPS_PATH }}
          kustomize edit set image \
            ${{ env.ARGOCD_APP_NAME }}=${{ env.ACR_LOGIN_SERVER }}/${{ env.ARGOCD_APP_NAME }}-${{ env.BUILD_BRANCH}}:${{ needs.containerize.outputs.image_tag }}

      - name: Login ArgoCD
        run: |
          # ArgoCD CLI 설치
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
          
          # ArgoCD 로그인
          argocd login ${{ env.ARGOCD_SERVER }} --username ${{ env.ARGOCD_USERNAME }} --password ${{ env.ARGOCD_PASSWORD }} --insecure

      - name: Set Argo CD Application
        env:
          GITOPS_PATH: ${{ env.GITOPS_PATH }}
          ARGOCD_SERVER: ${{ env.ARGOCD_SERVER }}
        run: |
          argocd app set ${{ env.ARGOCD_APP_NAME }} \
            --path ${{ env.GITOPS_APP_PATH }}/${{ env.GITOPS_PATH }} \
            --repo "git@github.com:${{ env.GITOPS_REPOSITORY }}.git" \
            --dest-server ${{ env.ARGOCD_DEST_K8S_SERVER  }} \
            --revision ${{ needs.containerize.outputs.image_tag }} \
            --sync-option Prune=true
        shell: bash

      - name: Sync Argo CD Application
        env:
          ARGOCD_SERVER: ${{ env.ARGOCD_SERVER }}
        run: |
          argocd app sync --prune \
            ${{ env.ARGOCD_APP_NAME }}
        shell: bash
